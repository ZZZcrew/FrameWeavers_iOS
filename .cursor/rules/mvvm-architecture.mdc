
# iOS MVVM 架构完整指南

## 项目概述

本指南适用于iOS17与iOS18，采用MVVM架构，专注于视频上传和连环画生成功能。我们只负责iOS App端逻辑，AI大模型后端由合作方负责。

## 职责范围

### ✅ App端负责部分
- 视频文件选择和验证（5-30分钟限制）
- 设备ID生成（UIDevice.current.identifierForVendor）
- 视频上传到合作方提供的API
- 接收和解析合作方返回的JSON数据
- 本地数据存储和状态管理

### ❌ 不负责的部分
- AI大模型视频分析
- 图像处理和风格化
- 剧本和问题生成
- 服务器端业务逻辑

## 项目结构

### 目录结构
```
Models/          // 数据模型
ViewModels/      // 视图模型  
Views/          // SwiftUI视图
Services/       // 业务逻辑服务
Utils/          // 工具类
```

## MVVM 架构规范

### 1. Models (数据模型)
- 纯数据结构，不包含业务逻辑
- 使用 `@Model` 用于 SwiftData
- 只包含属性，不包含方法
- 包含视频文件信息（时长、大小验证）
- 上传任务状态管理
- API响应数据结构

### 2. ViewModels (视图模型)
- 处理业务逻辑，管理状态
- 使用 `@Observable` 或 `ObservableObject`
- 包含 `@Published` 属性用于状态管理
- 不直接引用视图
- **禁止使用单例模式** (`shared` 静态实例)
- 状态管理与UI逻辑，处理用户交互
- 视频选择、验证、上传状态管理
- 数据绑定，向View提供格式化数据
- 调用Model执行业务操作，订阅数据变化（Combine）
- 错误与加载状态统一处理

### 3. Views (视图)
- 纯UI展示，不包含业务逻辑
- SwiftUI开发，@ObservedObject/@StateObject绑定ViewModel
- 通过 `@State` 和 `@Bindable` 管理状态
- 使用 ViewModel 处理业务逻辑
- 组件化、可复用、条件渲染（加载/错误/空数据）
- iOS设备适配（iPhone/iPad）、暗黑模式、主题切换
- 支持视频选择器、权限请求、上传进度展示

## ViewModel 实例化策略

### 推荐方式
1. **按需创建**：每个视图创建独立的ViewModel实例
2. **依赖注入**：通过 `.environment()` 传递ViewModel
3. **生命周期管理**：
   - 短期：使用 `@State` 管理
   - 长期：使用 `@Environment` 或 `@StateObject`

### 禁止方式
- ❌ 使用 `static let shared` 单例模式
- ❌ 在ViewModel中创建全局状态
- ❌ 多个视图共享同一个ViewModel实例

### 正确示例
```swift
// ✅ 正确：按需创建
@State private var viewModel = ItemViewModel()

// ✅ 正确：依赖注入
.environment(ItemViewModel())

// ❌ 错误：单例模式
// static let shared = ItemViewModel() // 禁止
```

## 数据流
View → ViewModel → Service → Model

## 禁止事项
- 在View中直接处理业务逻辑
- 在Model中包含业务逻辑
- 在ViewModel中直接操作UI
- 在View中直接访问数据库
- 使用单例模式创建ViewModel
- 在Model中包含业务逻辑
- 在ViewModel中直接操作UI
- 在View中直接访问数据库

## 视频上传流程设计

### 1. 权限请求流程
- 相册访问权限请求
- 网络权限状态检查

### 2. 视频选择界面
- 系统照片选择器（PhotosUI）
- 视频时长验证（5-30分钟）
- 实时预览和确认

### 3. 上传状态管理
- 上传进度实时显示
- 网络错误处理
- 取消上传功能
- 后台上传支持

### 4. 结果展示
- 连环画阅读界面
- 图片懒加载
- 交互问题展示

## 网络层设计

### 核心功能
- 与合作方API的HTTP通信
- multipart/form-data上传格式
- 上传进度跟踪

### API使用规范
- **上传端点**: 使用合作方提供的URL
- **必需参数**: videoFile + deviceId
- **响应格式**: 遵循README_iOS.md中的JSON结构

## 本地存储设计

### 核心功能
- SwiftData持久化任务历史
- 缓存生成的连环画数据

## iOS实现要点

- 充分利用iOS系统组件（PhotosPicker、ProgressView）
- 适配不同屏幕尺寸（iPhone SE到iPad Pro）
- 支持横竖屏切换
- 集成系统分享功能

## 性能优化建议

- 细粒度绑定，避免多余视图刷新
- 视频文件预处理（压缩、格式检查）
- 合理使用异步与线程，优化渲染
- 懒加载减少启动时间，高效列表展示
- 内存警告处理

## 用户交互设计

- 直观的操作流程：选择→验证→上传→等待→查看
- 清晰的视觉反馈：进度条、状态提示、错误处理
- 流畅的动画过渡
- 无障碍功能支持

## 技术栈

### 核心技术
- **SwiftUI**：iOS UI开发
- **Combine**：响应式数据流
- **SwiftData**：本地数据持久化
- **URLSession**：网络通信
- **PhotosUI**：系统照片选择器
- **AVFoundation**：视频时长和格式检查

### 开发规范
- 代码规范、类型安全、健壮性、详细注释
- **在增加函数func前先看看其他文件是否已有相关实现**
- 遵循Apple HIG，界面直观易用，专注iOS体验

## 参考资料

- [Apple Human Interface Guidelines](mdc:https:/developer.apple.com/design/human-interface-guidelines)
- [SwiftUI 官方文档](mdc:https:/developer.apple.com/documentation/swiftui)
- [Combine 官方文档](mdc:https:/developer.apple.com/documentation/combine)
- [SwiftData 官方文档](mdc:https:/developer.apple.com/documentation/swiftdata)
- [PhotosUI 官方文档](mdc:https:/developer.apple.com/documentation/photosui)
- [AVFoundation 官方文档](mdc:https:/developer.apple.com/documentation/avfoundation)
- [URLSession 官方文档](mdc:https:/developer.apple.com/documentation/foundation/urlsession)